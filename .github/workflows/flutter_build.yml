name: Build All Platforms and Release

on:
  workflow_dispatch:

env:
  PARENT_REPO: aimatochysia/qsafevault

jobs:
  build-ubuntu:
    name: Build Android, Web, Linux
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.set-tag.outputs.tag }}
    continue-on-error: true

    steps:
      - name: Checkout source from Parent repo
        uses: actions/checkout@v4
        with:
          repository: ${{ env.PARENT_REPO }}
          token: ${{ secrets.ORIGIN_PAT }}
          ref: main

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: 3.32.0

      - name: Cache Flutter dependencies
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: flutter-${{ runner.os }}-${{ hashFiles('pubspec.lock') }}-v2
          restore-keys: |
            flutter-${{ runner.os }}-

      - name: Clean Flutter project
        run: |
          flutter clean
          rm -rf build pubspec.lock

      - name: Install dependencies
        run: flutter pub get

      - name: Generate release tag
        id: set-tag
        run: echo "tag=v$(date +'%Y%m%d-%H%M')" >> $GITHUB_OUTPUT

      - name: Decode Android keystore
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > android/app/qsafevault-release-key.jks

      - name: Build Signed Android APK
        run: flutter build apk --release
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}

      - name: Build Web
        run: flutter build web --release

      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev libglib2.0-dev liblzma-dev libsecret-1-dev fakeroot dpkg-dev

      - name: Build Linux
        run: flutter build linux --release

      - name: Create Linux .deb package
        run: |
          mkdir -p dist/deb/qsafevault/usr/local/bin
          cp -r build/linux/x64/release/bundle/* dist/deb/qsafevault/usr/local/bin/
          mkdir -p dist/deb/qsafevault/DEBIAN
          cat <<EOF > dist/deb/qsafevault/DEBIAN/control
          Package: qsafevault
          Version: 1.0
          Section: utils
          Priority: optional
          Architecture: amd64
          Maintainer: GitHub Actions
          Description: QSafeVault Flutter app
          EOF
          dpkg-deb --build dist/deb/qsafevault qsafevault-linux.deb

      - name: Prepare Web and Android artifacts
        run: |
          cp build/app/outputs/flutter-apk/app-release.apk qsafevault.apk
          zip -r qsafevault-web.zip build/web

      - name: Upload Ubuntu artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ubuntu-artifacts
          path: |
            qsafevault.apk
            qsafevault-web.zip
            qsafevault-linux.deb
          if-no-files-found: error


  build-windows:
    name: Build Windows Installer
    runs-on: windows-latest
    needs: build-ubuntu
    continue-on-error: true

    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          repository: ${{ env.PARENT_REPO }}
          token: ${{ secrets.ORIGIN_PAT }}
          ref: main

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: 3.32.0

      - name: Install dependencies
        run: flutter pub get

      - name: Build Windows
        run: flutter build windows --release

      - name: Install Inno Setup
        run: choco install innosetup -y
        shell: pwsh
        
      - name: Create Windows Installer (Inno Setup)
        run: |
          "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" /Qp /DMyAppVersion=1.0 .github\installer.iss
        shell: cmd

      - name: Package fallback ZIP (if no installer)
        run: |
          if (!(Test-Path "qsafevault-windows.exe")) {
            Compress-Archive -Path build\windows\x64\runner\Release\* -DestinationPath qsafevault-windows.zip
          }
        shell: pwsh

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-artifacts
          path: |
            qsafevault-windows.exe
            qsafevault-windows.zip
          if-no-files-found: warn


  build-macos:
    name: Build macOS Installer
    runs-on: macos-latest
    needs: build-ubuntu
    continue-on-error: true

    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          repository: ${{ env.PARENT_REPO }}
          token: ${{ secrets.ORIGIN_PAT }}
          ref: main

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: 3.32.0

      - name: Install dependencies
        run: flutter pub get

      - name: Build macOS
        run: flutter build macos --release

      - name: Create DMG installer
        run: |
          mkdir -p dist/macos
          cp -r build/macos/Build/Products/Release/*.app dist/macos/
          brew install create-dmg || true
          create-dmg --overwrite --dmg-title="QSafeVault" qsafevault-macos.dmg dist/macos/*.app || true

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-artifacts
          path: |
            qsafevault-macos.dmg
          if-no-files-found: warn


  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-ubuntu, build-windows, build-macos]

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-dist

      - name: Determine build results
        id: status
        run: |
          echo "linux_status=${{ needs.build-ubuntu.result }}" >> $GITHUB_OUTPUT
          echo "windows_status=${{ needs.build-windows.result }}" >> $GITHUB_OUTPUT
          echo "macos_status=${{ needs.build-macos.result }}" >> $GITHUB_OUTPUT

      - name: Set release metadata
        id: release-info
        run: |
          TAG="${{ needs.build-ubuntu.outputs.tag }}"
          echo "TAG=$TAG" >> $GITHUB_ENV
          echo "RELEASE_NAME=Build $TAG" >> $GITHUB_ENV

          # Collect status text
          {
            echo "RELEASE_BODY<<EOF"
            echo "Automated multi-platform build results:"
            echo ""
            if [ "${{ steps.status.outputs.linux_status }}" = "success" ]; then
              echo "- ✅ Linux build succeeded"
            else
              echo "- ❌ Linux build failed"
            fi

            if [ "${{ steps.status.outputs.windows_status }}" = "success" ]; then
              echo "- ✅ Windows build succeeded"
            else
              echo "- ❌ Windows build failed"
            fi

            if [ "${{ steps.status.outputs.macos_status }}" = "success" ]; then
              echo "- ✅ macOS build succeeded"
            else
              echo "- ❌ macOS build failed"
            fi

            echo ""
            echo "Included installers (if successful):"
            echo "- Android: qsafevault.apk"
            echo "- Web: qsafevault-web.zip"
            echo "- Linux: qsafevault-linux.deb"
            echo "- Windows: qsafevault-windows.exe"
            echo "- macOS: qsafevault-macos.dmg"
            echo "EOF"
          } >> $GITHUB_ENV

      - name: Check if all builds failed
        id: check-fail
        run: |
          LINUX="${{ steps.status.outputs.linux_status }}"
          WINDOWS="${{ steps.status.outputs.windows_status }}"
          MACOS="${{ steps.status.outputs.macos_status }}"
          if [ "$LINUX" != "success" ] && [ "$WINDOWS" != "success" ] && [ "$MACOS" != "success" ]; then
            echo "ALL_FAILED=true" >> $GITHUB_ENV
          else
            echo "ALL_FAILED=false" >> $GITHUB_ENV
          fi

      - name: Stop if all builds failed
        if: env.ALL_FAILED == 'true'
        run: |
          echo "❌ All platform builds failed. Skipping release."
          exit 1

      - name: Create GitHub Release in Parent repo
        if: env.ALL_FAILED == 'false'
        uses: softprops/action-gh-release@v2
        with:
          repository: aimatochysia/qsafevault
          tag_name: ${{ env.TAG }}
          name: ${{ env.RELEASE_NAME }}
          body: ${{ env.RELEASE_BODY }}
          token: ${{ secrets.ORIGIN_PAT }}
          files: |
            release-dist/**/*
          overwrite_files: true
